#pragma version 10

smart_contracts.algo_marketplace.contract.AlgoMarketplace.approval_program:
    // smart_contracts/algo_marketplace/contract.py:4
    // class AlgoMarketplace(ARC4Contract):
    method "create_application(asset,uint64)void"
    method "set_price(uint64)void"
    method "opt_into_asset(pay)void"
    method "buy_asset(pay,uint64)void"
    method "delete_application()void"
    txna ApplicationArgs 0
    match main_create_application_route@1 main_set_price_route@2 main_opt_into_asset_route@3 main_buy_asset_route@4 main_delete_application_route@5
    err // reject transaction

main_create_application_route@1:
    // smart_contracts/algo_marketplace/contract.py:8-9
    // # create the app
    // @arc4.abimethod(allow_actions=["NoOp"], create="require")
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    !
    assert // is creating
    // smart_contracts/algo_marketplace/contract.py:4
    // class AlgoMarketplace(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Assets
    txna ApplicationArgs 2
    btoi
    // smart_contracts/algo_marketplace/contract.py:8-9
    // # create the app
    // @arc4.abimethod(allow_actions=["NoOp"], create="require")
    callsub create_application
    int 1
    return

main_set_price_route@2:
    // smart_contracts/algo_marketplace/contract.py:14-15
    // # update the listing price
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/algo_marketplace/contract.py:4
    // class AlgoMarketplace(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/algo_marketplace/contract.py:14-15
    // # update the listing price
    // @arc4.abimethod
    callsub set_price
    int 1
    return

main_opt_into_asset_route@3:
    // smart_contracts/algo_marketplace/contract.py:20-21
    // # opt in to the listing
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/algo_marketplace/contract.py:4
    // class AlgoMarketplace(ARC4Contract):
    txn GroupIndex
    int 1
    -
    dup
    gtxns TypeEnum
    int pay
    ==
    assert // transaction type is pay
    // smart_contracts/algo_marketplace/contract.py:20-21
    // # opt in to the listing
    // @arc4.abimethod
    callsub opt_into_asset
    int 1
    return

main_buy_asset_route@4:
    // smart_contracts/algo_marketplace/contract.py:34-35
    // # buy the listing
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/algo_marketplace/contract.py:4
    // class AlgoMarketplace(ARC4Contract):
    txn GroupIndex
    int 1
    -
    dup
    gtxns TypeEnum
    int pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 1
    btoi
    // smart_contracts/algo_marketplace/contract.py:34-35
    // # buy the listing
    // @arc4.abimethod
    callsub buy_asset
    int 1
    return

main_delete_application_route@5:
    // smart_contracts/algo_marketplace/contract.py:48-49
    // # delete the app
    // @arc4.abimethod(allow_actions=["DeleteApplication"])
    txn OnCompletion
    int DeleteApplication
    ==
    assert // OnCompletion is DeleteApplication
    txn ApplicationID
    assert // is not creating
    callsub delete_application
    int 1
    return


// smart_contracts.algo_marketplace.contract.AlgoMarketplace.create_application(asset_id: uint64, unitary_price: uint64) -> void:
create_application:
    // smart_contracts/algo_marketplace/contract.py:8-10
    // # create the app
    // @arc4.abimethod(allow_actions=["NoOp"], create="require")
    // def create_application(self, asset_id: Asset, unitary_price: UInt64) -> None:
    proto 2 0
    // smart_contracts/algo_marketplace/contract.py:11
    // self.assetId = asset_id.id
    byte "assetId"
    frame_dig -2
    app_global_put
    // smart_contracts/algo_marketplace/contract.py:12
    // self.unitaryPrice = unitary_price
    byte "unitaryPrice"
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.algo_marketplace.contract.AlgoMarketplace.set_price(unitary_price: uint64) -> void:
set_price:
    // smart_contracts/algo_marketplace/contract.py:14-16
    // # update the listing price
    // @arc4.abimethod
    // def set_price(self, unitary_price: UInt64) -> None:
    proto 1 0
    // smart_contracts/algo_marketplace/contract.py:17
    // assert Txn.sender == Global.creator_address
    txn Sender
    global CreatorAddress
    ==
    assert
    // smart_contracts/algo_marketplace/contract.py:18
    // self.unitaryPrice = unitary_price
    byte "unitaryPrice"
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.algo_marketplace.contract.AlgoMarketplace.opt_into_asset(mbr_pay: uint64) -> void:
opt_into_asset:
    // smart_contracts/algo_marketplace/contract.py:20-22
    // # opt in to the listing
    // @arc4.abimethod
    // def opt_into_asset(self, mbr_pay: gtxn.PaymentTransaction) -> None:
    proto 1 0
    // smart_contracts/algo_marketplace/contract.py:23
    // assert Txn.sender == Global.creator_address
    txn Sender
    global CreatorAddress
    ==
    assert
    // smart_contracts/algo_marketplace/contract.py:24
    // assert not Global.current_application_address.is_opted_in(Asset(self.asset_id))
    global CurrentApplicationAddress
    int 0
    byte "asset_id"
    app_global_get_ex
    assert // check asset_id exists
    asset_holding_get AssetBalance
    bury 1
    !
    assert
    // smart_contracts/algo_marketplace/contract.py:26
    // assert mbr_pay.receiver == Global.current_application_address
    frame_dig -1
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert
    // smart_contracts/algo_marketplace/contract.py:27
    // assert mbr_pay.amount == Global.min_balance + Global.asset_opt_in_min_balance
    frame_dig -1
    gtxns Amount
    global MinBalance
    global AssetOptInMinBalance
    +
    ==
    assert
    // smart_contracts/algo_marketplace/contract.py:28-32
    // itxn.AssetTransfer(
    //     xfer_asset=self.asset_id,
    //     asset_receiver=Global.current_application_address,
    //     asset_amount=0,
    // ).submit()
    itxn_begin
    // smart_contracts/algo_marketplace/contract.py:29
    // xfer_asset=self.asset_id,
    int 0
    byte "asset_id"
    app_global_get_ex
    assert // check asset_id exists
    // smart_contracts/algo_marketplace/contract.py:30
    // asset_receiver=Global.current_application_address,
    global CurrentApplicationAddress
    // smart_contracts/algo_marketplace/contract.py:31
    // asset_amount=0,
    int 0
    itxn_field AssetAmount
    itxn_field AssetReceiver
    itxn_field XferAsset
    // smart_contracts/algo_marketplace/contract.py:28
    // itxn.AssetTransfer(
    int axfer
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    // smart_contracts/algo_marketplace/contract.py:28-32
    // itxn.AssetTransfer(
    //     xfer_asset=self.asset_id,
    //     asset_receiver=Global.current_application_address,
    //     asset_amount=0,
    // ).submit()
    itxn_submit
    retsub


// smart_contracts.algo_marketplace.contract.AlgoMarketplace.buy_asset(buyer_txn: uint64, quantity: uint64) -> void:
buy_asset:
    // smart_contracts/algo_marketplace/contract.py:34-36
    // # buy the listing
    // @arc4.abimethod
    // def buy_asset(self, buyer_txn: gtxn.PaymentTransaction, quantity: UInt64) -> None:
    proto 2 0
    // smart_contracts/algo_marketplace/contract.py:37
    // assert self.unitaryPrice != UInt64(0)
    int 0
    byte "unitaryPrice"
    app_global_get_ex
    assert // check unitaryPrice exists
    assert
    // smart_contracts/algo_marketplace/contract.py:38
    // assert Txn.sender == buyer_txn.sender
    txn Sender
    frame_dig -2
    gtxns Sender
    ==
    assert
    // smart_contracts/algo_marketplace/contract.py:39
    // assert buyer_txn.receiver == Global.current_application_address
    frame_dig -2
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert
    // smart_contracts/algo_marketplace/contract.py:40
    // assert buyer_txn.amount == self.unitaryPrice * quantity
    frame_dig -2
    gtxns Amount
    int 0
    byte "unitaryPrice"
    app_global_get_ex
    assert // check unitaryPrice exists
    frame_dig -1
    *
    ==
    assert
    // smart_contracts/algo_marketplace/contract.py:42-46
    // itxn.AssetTransfer(
    //     xfer_asset=self.asset_id,
    //     asset_receiver=Txn.sender,
    //     asset_amount=quantity,
    // ).submit()
    itxn_begin
    // smart_contracts/algo_marketplace/contract.py:43
    // xfer_asset=self.asset_id,
    int 0
    byte "asset_id"
    app_global_get_ex
    assert // check asset_id exists
    // smart_contracts/algo_marketplace/contract.py:44
    // asset_receiver=Txn.sender,
    txn Sender
    frame_dig -1
    itxn_field AssetAmount
    itxn_field AssetReceiver
    itxn_field XferAsset
    // smart_contracts/algo_marketplace/contract.py:42
    // itxn.AssetTransfer(
    int axfer
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    // smart_contracts/algo_marketplace/contract.py:42-46
    // itxn.AssetTransfer(
    //     xfer_asset=self.asset_id,
    //     asset_receiver=Txn.sender,
    //     asset_amount=quantity,
    // ).submit()
    itxn_submit
    retsub


// smart_contracts.algo_marketplace.contract.AlgoMarketplace.delete_application() -> void:
delete_application:
    // smart_contracts/algo_marketplace/contract.py:48-50
    // # delete the app
    // @arc4.abimethod(allow_actions=["DeleteApplication"])
    // def delete_application(self) -> None:
    proto 0 0
    // smart_contracts/algo_marketplace/contract.py:51
    // assert Txn.sender == Global.creator_address
    txn Sender
    global CreatorAddress
    ==
    assert
    // smart_contracts/algo_marketplace/contract.py:53-58
    // itxn.AssetTransfer(
    //     xfer_asset=self.asset_id,
    //     asset_receiver=Global.creator_address,
    //     asset_amount=0,
    //     asset_close_to=Global.creator_address,
    // ).submit()
    itxn_begin
    // smart_contracts/algo_marketplace/contract.py:54
    // xfer_asset=self.asset_id,
    int 0
    byte "asset_id"
    app_global_get_ex
    assert // check asset_id exists
    // smart_contracts/algo_marketplace/contract.py:55
    // asset_receiver=Global.creator_address,
    global CreatorAddress
    // smart_contracts/algo_marketplace/contract.py:57
    // asset_close_to=Global.creator_address,
    dup
    itxn_field AssetCloseTo
    // smart_contracts/algo_marketplace/contract.py:56
    // asset_amount=0,
    int 0
    itxn_field AssetAmount
    itxn_field AssetReceiver
    itxn_field XferAsset
    // smart_contracts/algo_marketplace/contract.py:53
    // itxn.AssetTransfer(
    int axfer
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    // smart_contracts/algo_marketplace/contract.py:53-58
    // itxn.AssetTransfer(
    //     xfer_asset=self.asset_id,
    //     asset_receiver=Global.creator_address,
    //     asset_amount=0,
    //     asset_close_to=Global.creator_address,
    // ).submit()
    itxn_submit
    // smart_contracts/algo_marketplace/contract.py:60-64
    // itxn.Payment(
    //     receiver=Global.creator_address,
    //     amount=0,
    //     close_remainder_to=Global.creator_address,
    // ).submit()
    itxn_begin
    // smart_contracts/algo_marketplace/contract.py:61
    // receiver=Global.creator_address,
    global CreatorAddress
    // smart_contracts/algo_marketplace/contract.py:63
    // close_remainder_to=Global.creator_address,
    dup
    itxn_field CloseRemainderTo
    // smart_contracts/algo_marketplace/contract.py:62
    // amount=0,
    int 0
    itxn_field Amount
    itxn_field Receiver
    // smart_contracts/algo_marketplace/contract.py:60
    // itxn.Payment(
    int pay
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    // smart_contracts/algo_marketplace/contract.py:60-64
    // itxn.Payment(
    //     receiver=Global.creator_address,
    //     amount=0,
    //     close_remainder_to=Global.creator_address,
    // ).submit()
    itxn_submit
    retsub
